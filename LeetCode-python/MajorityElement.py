"""
给定一个非空的数组，其中某一数值的数量超过数组长度的一半，请找出这个值。

注意点：

    无

例子:

输入: nums = [1, 2, 2, 3, 3, 3, 3]

输出: 3
解题思路

可以通过哈希表记录每个数值出现的次数并找出出现次数最多的数值。不过有一个比较巧妙的思路是，就是不断将数组中两两不同的数同时去除，极端情况是每个其他数值都与一个数量最多的数同时去除，即使这样，最后剩下的数值也是那个数量超过总数一半的数值。具体实现来看，我们可以把需要抵消的数值存起来，并记录它的数量，这个数量表示它还能抵消掉几个不同的数值。遇到与它不同的数值就减一，遇到相同的就加一。如果数量变为0，那说明这个数暂时已经完全去除了。我们可以用下一个数值继续与其它的数值相抵消。遍历完整个数组后，还没抵消掉的数值就是要求的结果。
"""
class Solution(object):
	def majorityElement(self,nums):
		result = None
		count = 0
		for num in nums:
			if count = 0:
				result = num
			if result = num:
				count += 1
			else:
				result -= 1

		return result

if __name__ == "__main__":
	Solution().majorityElement([1,2,2,2,3,3,3,3])








