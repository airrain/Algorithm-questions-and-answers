"""
设计并实现一个支持近期最少使用缓存的数据结构。要支持存和取两个操作。根据键取值时，如果键对应的值不存在，则返回-1。存键值对时，如果容量已经满了，要把最近最少使用的键值对去除后再插入。

注意点：

    无

例子:

无
解题思路

首先明确最少使用缓存是指我们要缓存最近使用的数据，如果一个数据长时间没有使用，且又有新的数据加入，那么应该将最长时间没有使用的数据去除。为此我们可以通过一个双向链表完成这样的数据结构，表头表示最近使用过的数据，越接近表尾表示越久没有使用过。当要将旧数据删除时，我们只需要将链表尾部的节点去除，并在头部插入新的节点。而更新节点时，我们只需要将原来的节点删除，改变节点的内容，再插入到链表头部。而最简单的插入，即还没有达到容量上限时，我们只要在头部直接插入。

我们知道链表的查找操作速度较慢，为了提高查找的速度，我们可以通过一个键值对的字典来记录数据。查找时先判断是否在字典中，如果在则需要更新节点的使用情况并返回结果，如果不在则直接返回-1。这样插入数据时也可以通过字典来判断是首次插入还是数据的更新。
"""
class LRUCache(object):
	class Node(object):
		def __init__(self,capacity):

		def __remove__(self,node):

		def __insert(self,node):

		def __get__(self,key):

		def set(self,key,value):


if __name__ == "__main__":
	lru_cache = LRUCache(3)
		 